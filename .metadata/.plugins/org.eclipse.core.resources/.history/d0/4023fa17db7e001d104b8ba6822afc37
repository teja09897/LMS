package com.te.lms.controller;

import org.mockito.InjectMocks;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.te.lms.service.AdminService;

@SpringBootTest
@AutoConfigureMockMvc
class AdminControllerTest {
	
	@MockBean
	private AdminService adminService;
	
	@Autowired
	private MockMvc mockMvc;
	
	private ObjectMapper objectMapper;// = new ObjectMapper();
	
	@InjectMocks
	private AdminController adminController;


//	@Test
//	void testRegisterMentor() throws Exception {
//		NewMentorDto mentorDto = NewMentorDto.builder().mentorEmailId("a@a.com").mentorEmailId("Ty03")
//				.mentorName("vny").build();
//		
//		MessageDto messageDto = MessageDto.builder().employeeEmail("a@a").message("message").build();
//		Mockito.when(adminService.registerMentor(Mockito.any()))
//				.thenReturn(Optional.ofNullable(mentorDto.getMentorName()));
//		String contentAsString = mockMvc
//				.perform(MockMvcRequestBuilders.post("/admin/register/mentor")
//						.contentType(MediaType.APPLICATION_JSON_VALUE)
//						.content(objectMapper.writeValueAsString(mentorDto)))
//				.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();
//		GeneralResponse<String> readValue = objectMapper.readValue(contentAsString, GeneralResponse.class);
//		assertEquals(readValue.getMessage(), "mentor has been registered successfully");
//		assertEquals(readValue.getData(), mentorDto.getMentorName());
//
//	}
	
	

}
