package com.te.lms.service.implementation;

import java.util.List;

import java.util.Optional;
import java.util.function.Function;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.te.lms.dto.NewBatchDto;
import com.te.lms.dto.NewMentorDto;
import com.te.lms.dto.SkillsDto;
import com.te.lms.dto.TechnologiesDto;
import com.te.lms.entity.Batch;
import com.te.lms.entity.Mentor;
import com.te.lms.entity.Skills;
import com.te.lms.entity.Technologies;
import com.te.lms.repository.BatchRepository;
import com.te.lms.repository.MentorRepository;
import com.te.lms.service.AdminService;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class AdminServiceImpl implements AdminService {
	private final MentorRepository mentorRepository;
	private final BatchRepository batchRepository;

///Mentor
	@Override
	public Optional<String> registerMentor(NewMentorDto mentorDto) {
		Mentor mentor = new Mentor();
		BeanUtils.copyProperties(mentorDto, mentor);

		List<Skills> skills = Lists.newArrayList();

		for (SkillsDto skillsDto : mentorDto.getSkillsDto()) {
			Skills skillsEntity = new Skills();
			BeanUtils.copyProperties(skillsDto, skillsEntity);
			skills.add(skillsEntity);
			skillsEntity.setMentor(mentor);
		}
		mentor.setSkills(skills);
		mentor.setStatus("ACTIVE");
		mentorRepository.save(mentor);
		return Optional.ofNullable(mentor.getMentorId());
	}

	@Override
	public Optional<String> updateMentor(NewMentorDto newMentorDto) {
		Mentor mentor = new Mentor();
		BeanUtils.copyProperties(newMentorDto, mentor);
		List<Skills> skills = Lists.newArrayList();

		for (SkillsDto skillsDto : newMentorDto.getSkillsDto()) {
			Skills skillsEntity = new Skills();
			BeanUtils.copyProperties(skillsDto, skillsEntity);
			skills.add(skillsEntity);
			skillsEntity.setMentor(mentor);
		}
		mentor.setSkills(skills);
		Optional<Mentor> mentorFromDb = mentorRepository.findById(newMentorDto.getMentorId());
		if (mentorFromDb.isPresent()) {
			mentorFromDb.get().setMentorId(newMentorDto.getMentorId());
			mentorFromDb.get().setMentorName(newMentorDto.getMentorName());
			mentorFromDb.get().setMentorEmailId(newMentorDto.getMentorEmailId());
			for (SkillsDto skillsDto : newMentorDto.getSkillsDto()) {
				Skills skillsEntity = new Skills();
				BeanUtils.copyProperties(skillsDto, skillsEntity);
				mentorFromDb.get().setSkills(skills);
			}
			Mentor saveMentor = mentorRepository.save(mentorFromDb.get());
		}
		return Optional.ofNullable(mentorFromDb.get().getMentorId());
	}

	@Override
	public Optional<String> deleteMentor(String mentorId) {
		Optional<Mentor> mentorFromDb = mentorRepository.findById(mentorId);
		mentorFromDb.get().setStatus("InActive");
		mentorRepository.save(mentorFromDb.get());
		return Optional.ofNullable(mentorId);
	}
	
	@Override
	public Optional<Object> read(String mentorId) {
		Optional<Mentor> mentorFromDb = mentorRepository.findById(mentorId);
		if (mentorFromDb.isPresent()) {
			NewMentorDto mentorDto=new NewMentorDto();
			BeanUtils.copyProperties(mentorFromDb.get(), mentorDto);
			return Optional.ofNullable(mentorDto);
		}
		throw new RuntimeException("Unable to fetch the mentor details");
	}

//===============================================================================================================
	// Batch register

	@Override
	public Optional<String> createBatch(NewBatchDto newBatchDto) {
		Batch batch = new Batch();
		BeanUtils.copyProperties(newBatchDto, batch);
		List<Technologies> technologies = Lists.newArrayList();
		for (TechnologiesDto technologiesDto : newBatchDto.getTechnologiesDto()) {
			Technologies technologiesEntity = new Technologies();
			BeanUtils.copyProperties(technologiesDto, technologiesEntity);
			technologies.add(technologiesEntity);
			technologiesEntity.getBatch().add(batch);
		}
		batch.setTechnologies(technologies);
		batch.setStatus_("ACTIVE");
		batchRepository.save(batch);

		return Optional.ofNullable(newBatchDto.getBatchId());
	}

	// Batch update
	@Override
	public Optional<String> updateBatch(NewBatchDto newBatchDto) {
		Batch batch = new Batch();
		BeanUtils.copyProperties(newBatchDto, batch);

		List<Technologies> technologies = Lists.newArrayList();
		for (TechnologiesDto technologiesDto : newBatchDto.getTechnologiesDto()) {
			Technologies technologiesEntity = new Technologies();
			BeanUtils.copyProperties(technologiesDto, technologiesEntity);
			technologies.add(technologiesEntity);
		}
		batch.setTechnologies(technologies);

		Optional<Batch> batchFromDb = batchRepository.findById(newBatchDto.getBatchId());
		if (batchFromDb.isPresent()) {
			batchFromDb.get().setBatchId(newBatchDto.getBatchId());
			batchFromDb.get().setBatchName(newBatchDto.getBatchName());
			batchFromDb.get().setEndDate(newBatchDto.getEndDate());
			batchFromDb.get().setStartDate(newBatchDto.getStartDate());
			batchFromDb.get().setStatus(newBatchDto.getStatus());

			for (TechnologiesDto technologiesDto : newBatchDto.getTechnologiesDto()) {
				Technologies technologiesEntity = new Technologies();
				BeanUtils.copyProperties(technologiesDto, technologiesEntity);
				batchFromDb.get().getTechnologies().add(technologiesEntity);
			}
			batchRepository.save(batchFromDb.get());
		}
		return Optional.ofNullable(newBatchDto.getBatchId());
	}

	// Batch delete
	@Override
	public Optional<String> deleteBatchDetails(String batchId) {
		Optional<Batch> batchFromDb = batchRepository.findById(batchId);
		batchFromDb.get().setStatus_("INACTIVE");
		batchRepository.save(batchFromDb.get());
		return Optional.ofNullable(batchId);
	}

	@Override
	public Optional<Object> readBatch(String batchId) {
		Optional<Batch> batchFromDb = batchRepository.findById(batchId);
		if (batchFromDb.isPresent()) {
			NewBatchDto batchDto=new NewBatchDto();
			BeanUtils.copyProperties(batchFromDb, batchDto);
			return Optional.ofNullable(batchDto);
		}
		throw new RuntimeException("Unable to Fetching Batch details");
		
	}


	

}
