package com.te.lms.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.UnsupportedEncodingException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MockMvcBuilder;
import org.springframework.test.web.servlet.ResultMatcher;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.Lists;
import com.te.lms.dto.ApproveDto;
import com.te.lms.dto.MessageDto;
import com.te.lms.dto.NewBatchDto;
import com.te.lms.dto.NewMentorDto;
import com.te.lms.dto.RejectDto;
import com.te.lms.dto.SkillsDto;
import com.te.lms.dto.TechnologiesDto;
import com.te.lms.dto.UpdateMentorDto;
import com.te.lms.entity.Technologies;
import com.te.lms.response.GeneralResponse;
import com.te.lms.response.RegistrationResponse;
import com.te.lms.service.AdminService;

@SpringBootTest
@AutoConfigureMockMvc
class AdminControllerTest {
	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private AdminService adminService;

	@InjectMocks
	private AdminController adminController;

	@Autowired
	private ObjectMapper objectMapper;

	@Test
	public void testRegisterMentor() throws JsonProcessingException, UnsupportedEncodingException, Exception {
		List<SkillsDto> skillsDtos = Lists.newArrayList();
		SkillsDto skillsDto = new SkillsDto();
		skillsDto.setSkillName("java");
		skillsDtos.add(skillsDto);
		NewMentorDto mentorDto = NewMentorDto.builder().mentorEmailId("ravi@gmail.com").mentorName("vijay")
				.mentorId("TY13").skillsDto(skillsDtos).build();
		MessageDto messageDto = MessageDto.builder().employeeEmail("ravi@gmail.com").message("message").build();

		Mockito.when(adminService.registerMentor(Mockito.any()))
				.thenReturn(Optional.ofNullable(mentorDto.getMentorId()));

		String contentAsString = mockMvc
				.perform(MockMvcRequestBuilders.post("/admin/register/mentor").accept(MediaType.APPLICATION_JSON_VALUE)
						.content(objectMapper.writeValueAsString(mentorDto))
						.contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();

		RegistrationResponse readValue = objectMapper.readValue(contentAsString, RegistrationResponse.class);
		assertEquals("mentor has been registered successfully", readValue.getMessage());
	}

	@Test
	public void testRegisterMentor_Returns400() throws JsonProcessingException, Exception {
		NewMentorDto mentorDto = NewMentorDto.builder().mentorEmailId("ravi@gmail.com").mentorName("vijay")
				.mentorId("TY13").skillsDto(null).build();
		MessageDto messageDto = MessageDto.builder().employeeEmail("ravi@gmail.com").message("message").build();
		Mockito.when(adminService.registerMentor(mentorDto)).thenReturn(Optional.ofNullable(null));
		mockMvc.perform(MockMvcRequestBuilders.post("/admin/register/mentor").accept(MediaType.APPLICATION_JSON_VALUE)
				.content(objectMapper.writeValueAsString(messageDto)).contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(MockMvcResultMatchers.status().isBadRequest());

	}

	@Test // register batch
	public void testRegisterBatch() throws JsonProcessingException, UnsupportedEncodingException, Exception {
		List<TechnologiesDto> technologiesDtos = Lists.newArrayList();
		TechnologiesDto technologiesDto = new TechnologiesDto();
		technologiesDto.setTechnologyName("SQL");
		technologiesDtos.add(technologiesDto);

		NewBatchDto batchDto = NewBatchDto.builder().batchId("TY01").batchName("uplift-sep-12")
				.endDate(LocalDate.of(2022, 10, 12)).startDate(LocalDate.of(2022, 9, 12)).mentorName("vijendra")
				.technologiesDto(technologiesDtos).build();

		Mockito.when(adminService.createBatch(Mockito.any())).thenReturn(Optional.ofNullable(batchDto.getBatchId()));

		String contentAsString = mockMvc
				.perform(MockMvcRequestBuilders.post("/admin/register/batch").accept(MediaType.APPLICATION_JSON_VALUE)
						.content(objectMapper.writeValueAsString(batchDto))
						.contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();

		RegistrationResponse readValue = objectMapper.readValue(contentAsString, RegistrationResponse.class);
		assertEquals("A New Batch has been created", readValue.getMessage());
	}

	@Test
	public void testRegisterBatch_Returns400() throws JsonProcessingException, Exception {
		NewBatchDto batchDto = NewBatchDto.builder().batchId("TY01").batchName("uplift-sep-12")
				.endDate(LocalDate.of(2022, 10, 12)).startDate(LocalDate.of(2022, 9, 12)).mentorName("vijendra")
				.technologiesDto(null).build();
		Mockito.when(adminService.createBatch(Mockito.any())).thenReturn(Optional.ofNullable(null));

		mockMvc.perform(MockMvcRequestBuilders.post("/admin/register/batch").accept(MediaType.APPLICATION_JSON_VALUE)
				.content(objectMapper.writeValueAsString(batchDto)).contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(MockMvcResultMatchers.status().isBadRequest());
	}

	@Test // update mentor
	public void testUpdateMentor() throws JsonProcessingException, UnsupportedEncodingException, Exception {
		List<SkillsDto> skillsDtos = Lists.newArrayList();
		SkillsDto skillsDto = new SkillsDto();
		skillsDto.setSkillName("JAVA");
		skillsDtos.add(skillsDto);
		NewMentorDto mentorDto = NewMentorDto.builder().mentorEmailId("tej123@gmail.com").mentorId("TYO1")
				.mentorName("VIJENDRA").skillsDto(skillsDtos).build();

		Mockito.when(adminService.updateMentor(Mockito.any())).thenReturn(Optional.ofNullable(mentorDto.getMentorId()));

		String contentAsString = mockMvc
				.perform(MockMvcRequestBuilders.put("/admin/update/mentor").accept(MediaType.APPLICATION_JSON_VALUE)
						.content(objectMapper.writeValueAsString(mentorDto))
						.contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();

		RegistrationResponse readValue = objectMapper.readValue(contentAsString, RegistrationResponse.class);
		assertEquals("Mentor details updated successfully", readValue.getMessage());
	}

	@Test
	public void testUpdateBatch() throws JsonProcessingException, UnsupportedEncodingException, Exception {
		List<TechnologiesDto> technologiesDtos = Lists.newArrayList();
		TechnologiesDto technologiesDto = new TechnologiesDto();
		technologiesDto.setTechnologyName("java");
		technologiesDtos.add(technologiesDto);
		NewBatchDto batchDto = NewBatchDto.builder().batchId("TYO1").batchName("UPLIFT-SEP-12").mentorName("VIJRNDRA")
				.startDate(LocalDate.of(2022, 9, 12)).endDate(LocalDate.of(2022, 12, 12)).technologiesDto(null).build();

		Mockito.when(adminService.updateBatch(Mockito.any())).thenReturn(Optional.ofNullable(batchDto.getBatchId()));
		String contentAsString = mockMvc
				.perform(MockMvcRequestBuilders.put("/admin/update/batch").accept(MediaType.APPLICATION_JSON_VALUE)
						.content(objectMapper.writeValueAsString(batchDto))
						.contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();

		RegistrationResponse readValue = objectMapper.readValue(contentAsString, RegistrationResponse.class);
		assertEquals("Batch details updated successfully", readValue.getMessage());
	}

	@Test // DELETE MENTOR
	public void testDeleteMentor() throws JsonProcessingException, UnsupportedEncodingException, Exception {
		List<SkillsDto> skillsDtos = Lists.newArrayList();
//		SkillsDto skillsDto=new SkillsDto();
//		skillsDto.setSkillName("JAVA");
//		skillsDtos.add(skillsDto);
		NewMentorDto mentorDto = NewMentorDto.builder().mentorEmailId("tej123@gmail.com").mentorId("TYO1")
				.mentorName("VIJENDRA").skillsDto(skillsDtos).build();

		Mockito.when(adminService.deleteMentor(mentorDto.getMentorId()))
				.thenReturn(Optional.ofNullable(mentorDto.getMentorId()));
		String contentAsString = mockMvc
				.perform(MockMvcRequestBuilders.put("/admin/delete/mentor/TYO1")
						.accept(MediaType.APPLICATION_JSON_VALUE).content(objectMapper.writeValueAsString(mentorDto))
						.contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();

		RegistrationResponse readValue = objectMapper.readValue(contentAsString, RegistrationResponse.class);
		assertEquals("mentor deleted successfully", readValue.getMessage());
	}

	@Test // DELETE BATCH
	public void testDeleteBatch() throws JsonProcessingException, UnsupportedEncodingException, Exception {
		NewBatchDto batchDto = NewBatchDto.builder().batchId("TY01").build();
		Mockito.when(adminService.deleteBatchDetails(batchDto.getBatchId()))
				.thenReturn(Optional.ofNullable(batchDto.getBatchId()));
		String contentAsString = mockMvc
				.perform(MockMvcRequestBuilders.put("/admin/delete/batch/TY01").accept(MediaType.APPLICATION_JSON_VALUE)
						.content(objectMapper.writeValueAsString(batchDto))
						.contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();

		RegistrationResponse readValue = objectMapper.readValue(contentAsString, RegistrationResponse.class);
		assertEquals("Batch details deleted successfully", readValue.getMessage());
	}

	@Test // search mentor
	public void testGetMentor() throws JsonProcessingException, UnsupportedEncodingException, Exception {
		NewMentorDto mentorDto = NewMentorDto.builder().mentorId("TY01").mentorName("VIJENDRA")
				.mentorEmailId("TEJ123@gamil.com").skillsDto(Lists.newArrayList()).build();
		List<SkillsDto> skillsDtos = Lists.newArrayList();
		SkillsDto skillsDto = new SkillsDto();
		skillsDto.setSkillName("html");
		skillsDtos.add(skillsDto);
		mentorDto.setSkillsDto(skillsDtos);

		Mockito.when(adminService.read(mentorDto.getMentorId())).thenReturn(Optional.ofNullable(mentorDto));
		String contentAsString = mockMvc
				.perform(MockMvcRequestBuilders.get("/admin/search/mentor/TY01")
						.accept(MediaType.APPLICATION_JSON_VALUE).content(objectMapper.writeValueAsString(mentorDto))
						.contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();

		GeneralResponse readValue = objectMapper.readValue(contentAsString, GeneralResponse.class);
		assertEquals("Fetching mentor details successfully", readValue.getMessage());
	}

	@Test
	public void testGetBatchDetails() throws JsonProcessingException, UnsupportedEncodingException, Exception {
		NewBatchDto batchDto = NewBatchDto.builder().batchId("TY01").batchName("UPLIFT-12").mentorName("VIJENDRA")
				.startDate(LocalDate.of(2022, 9, 12)).endDate(LocalDate.of(2022, 12, 12))
				.technologiesDto(Lists.newArrayList()).build();
		List<TechnologiesDto> technologiesDtos = Lists.newArrayList();
		TechnologiesDto technologiesDto = new TechnologiesDto();
		technologiesDto.setTechnologyName("java");
		technologiesDtos.add(technologiesDto);
		batchDto.setTechnologiesDto(technologiesDtos);

		Mockito.when(adminService.readBatch(batchDto.getBatchId())).thenReturn(Optional.ofNullable(batchDto));
		String contentAsString = mockMvc
				.perform(MockMvcRequestBuilders.get("/admin/search/batch/TY01").accept(MediaType.APPLICATION_JSON_VALUE)
						.content(objectMapper.writeValueAsString(batchDto))
						.contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();

		GeneralResponse readValue = objectMapper.readValue(contentAsString, GeneralResponse.class);
		assertEquals("Fetching Batch details successfylly", readValue.getMessage());

	}
	
	//====================================================================================================================
	@Test//approve employee
	public void testApproveEmployee() throws JsonProcessingException, UnsupportedEncodingException, Exception {
		ApproveDto approveDto=ApproveDto.builder().batchId("TY01").batchName("UPLIFT-HYD").build();
		MessageDto messageDto=MessageDto.builder().employeeEmail("tejavasa@gmail.com").message("this is message").build();
		Mockito.when(adminService.approve(Mockito.any(),Mockito.any())).thenReturn(Optional.ofNullable(messageDto));
		
		String contentAsString = mockMvc.perform(MockMvcRequestBuilders.post("/admin/approve/employee/TY01").accept(MediaType.APPLICATION_JSON_VALUE)
				 .content(objectMapper.writeValueAsString(approveDto))
				 .contentType(MediaType.APPLICATION_JSON_VALUE))
		.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();
		
		GeneralResponse readValue = objectMapper.readValue(contentAsString, GeneralResponse.class);
		assertEquals("approved", readValue.getMessage());
	}
	
	@Test//reject employee
	public void testRejectEmployee() throws JsonProcessingException, UnsupportedEncodingException, Exception  {
		RejectDto rejectDto=RejectDto.builder().reason("rejected").build();
		MessageDto messageDto=MessageDto.builder().employeeEmail("tejavasa@gmail.com").message("this is message").build();
     Mockito.when(adminService.reject(Mockito.any(), Mockito.any())).thenReturn(Optional.ofNullable(messageDto));
     
     String contentAsString = mockMvc.perform(MockMvcRequestBuilders.post("/admin/reject/employee/TY01").accept(MediaType.APPLICATION_JSON_VALUE)
    		          .content(objectMapper.writeValueAsString(rejectDto))
    		          .contentType(MediaType.APPLICATION_JSON_VALUE))
                   .andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();
		GeneralResponse readValue = objectMapper.readValue(contentAsString, GeneralResponse.class);
		
		assertEquals("REJECTED", readValue.getMessage());
	}
	
	@Test
	public void name() throws UnsupportedEncodingException, Exception {
		RejectDto rejectDto=RejectDto.builder().reason("rejected").build();

		mockMvc.perform(MockMvcRequestBuilders.post("/admin/reject/employee/TY01").accept(MediaType.APPLICATION_JSON_VALUE)
		          .content(objectMapper.writeValueAsString(rejectDto))
		          .contentType(MediaType.APPLICATION_JSON_VALUE))
             .andExpect(MockMvcResultMatchers.status().isBadRequest());
	
	
	}

}
