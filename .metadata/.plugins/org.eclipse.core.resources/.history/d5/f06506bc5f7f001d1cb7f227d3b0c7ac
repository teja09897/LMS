package com.te.lms.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.UnsupportedEncodingException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MockMvcBuilder;
import org.springframework.test.web.servlet.ResultMatcher;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.Lists;
import com.te.lms.dto.MessageDto;
import com.te.lms.dto.NewBatchDto;
import com.te.lms.dto.NewMentorDto;
import com.te.lms.dto.SkillsDto;
import com.te.lms.dto.TechnologiesDto;
import com.te.lms.dto.UpdateMentorDto;
import com.te.lms.entity.Technologies;
import com.te.lms.response.RegistrationResponse;
import com.te.lms.service.AdminService;

@SpringBootTest
@AutoConfigureMockMvc
class AdminControllerTest {
	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private AdminService adminService;

	@InjectMocks
	private AdminController adminController;

	@Autowired
	private ObjectMapper objectMapper;

	@Test
	public void testRegisterMentor() throws JsonProcessingException, UnsupportedEncodingException, Exception {
		List<SkillsDto> skillsDtos = Lists.newArrayList();
		SkillsDto skillsDto = new SkillsDto();
		skillsDto.setSkillName("java");
		skillsDtos.add(skillsDto);
		NewMentorDto mentorDto = NewMentorDto.builder().mentorEmailId("ravi@gmail.com").mentorName("vijay")
				.mentorId("TY13").skillsDto(skillsDtos).build();
		MessageDto messageDto = MessageDto.builder().employeeEmail("ravi@gmail.com").message("message").build();

		Mockito.when(adminService.registerMentor(Mockito.any()))
				.thenReturn(Optional.ofNullable(mentorDto.getMentorId()));

		String contentAsString = mockMvc
				.perform(MockMvcRequestBuilders.post("/admin/register/mentor").accept(MediaType.APPLICATION_JSON_VALUE)
						.content(objectMapper.writeValueAsString(mentorDto))
						.contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();

		RegistrationResponse readValue = objectMapper.readValue(contentAsString, RegistrationResponse.class);
		assertEquals("mentor has been registered successfully", readValue.getMessage());
	}

//	@Test
//	public void testUpdateMentor_Return400() throws Exception{
//		NewMentorDto mentorDto = new NewMentorDto();
//
//		Mockito.when(adminService.updateMentor(Mockito.any())).thenReturn(Optional.ofNullable(mentorDto.getMentorId()));
//		mockMvc.perform(MockMvcRequestBuilders.put("/update/mentor").accept(MediaType.APPLICATION_JSON_VALUE)
//				.content(objectMapper.writeValueAsString(mentorDto)).contentType(MediaType.APPLICATION_JSON))
//				.andExpect(MockMvcResultMatchers.status().isBadRequest());
//	}

	@Test
	public void testRegisterBatch() throws JsonProcessingException, UnsupportedEncodingException, Exception {
		List<TechnologiesDto> technologiesDtos = Lists.newArrayList();
		TechnologiesDto technologiesDto = new TechnologiesDto();
		technologiesDto.setTechnologyName("SQL");
		technologiesDtos.add(technologiesDto);

		NewBatchDto batchDto = NewBatchDto.builder().batchId("TY01").batchName("uplift-sep-12")
				.endDate(LocalDate.of(2022, 10, 12)).startDate(LocalDate.of(2022, 9, 12)).mentorName("vijendra")
				.technologiesDto(technologiesDtos).build();

		Mockito.when(adminService.createBatch(Mockito.any())).thenReturn(Optional.ofNullable(batchDto.getBatchId()));

		String contentAsString = mockMvc
				.perform(MockMvcRequestBuilders.post("/admin/register/batch").accept(MediaType.APPLICATION_JSON_VALUE)
						.content(objectMapper.writeValueAsString(batchDto))
						.contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();

		RegistrationResponse readValue = objectMapper.readValue(contentAsString, RegistrationResponse.class);
		assertEquals("A New Batch has been created", readValue.getMessage());
	}
	
	@Test
	public void testUpdateMentor() throws JsonProcessingException, UnsupportedEncodingException, Exception {
		List<SkillsDto> skillsDtos=Lists.newArrayList();
		SkillsDto skillsDto=new SkillsDto();
		skillsDto.setSkillName("JAVA");
		skillsDtos.add(skillsDto);
		  NewMentorDto mentorDto=NewMentorDto.builder().mentorEmailId("tej123@gmail.com").mentorId("TYO1").mentorName("VIJENDRA")
				                               .skillsDto(skillsDtos).build();
		  
		  Mockito.when(adminService.updateMentor(Mockito.any())).thenReturn(Optional.ofNullable(mentorDto.getMentorId()));
		  
		  String contentAsString=mockMvc.perform(MockMvcRequestBuilders.put("/admin/update/mentor")
				                              .accept(MediaType.APPLICATION_JSON_VALUE)
				                              .content(objectMapper.writeValueAsString(mentorDto))
				                              .contentType(MediaType.APPLICATION_JSON_VALUE))
				                         .andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();
		
		  RegistrationResponse readValue = objectMapper.readValue(contentAsString, RegistrationResponse.class);
		  assertEquals("Mentor details updated successfully", readValue.getMessage());
	}

}
