package com.te.lms.service.implementation;

import java.util.Iterator;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.te.lms.dto.AddressDetailsDto;
import com.te.lms.dto.ContactDto;
import com.te.lms.dto.EducationDetailsDto;
import com.te.lms.dto.ExperienceDto;
import com.te.lms.dto.RegistrationDto;
import com.te.lms.dto.TechnicalSkillsDto;
import com.te.lms.entity.AddressDetails;
import com.te.lms.entity.BankDetails;
import com.te.lms.entity.Contact;
import com.te.lms.entity.EducationDetails;
import com.te.lms.entity.Employee;
import com.te.lms.entity.Experience;
import com.te.lms.entity.SecondaryInfo;
import com.te.lms.entity.TechnicalSkills;
import com.te.lms.repository.EmployeeRepository;
import com.te.lms.service.EmployeeService;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class EmployeeServiceImpl implements EmployeeService {

	private final EmployeeRepository employeeRepository;

	@Override
	public Optional<String> register(RegistrationDto registrationDto) {
		Employee employee = new Employee();
		SecondaryInfo secondaryInfo = new SecondaryInfo();
		BankDetails bankDetails = new BankDetails();
		List<EducationDetails> educationDetails = Lists.newArrayList();
		List<AddressDetails> addressDetails = Lists.newArrayList();
		List<Experience> experience = Lists.newArrayList();
		List<Contact> contacts = Lists.newArrayList();
		List<TechnicalSkills> technicalSkills = Lists.newArrayList();

		BeanUtils.copyProperties(registrationDto, employee);
		BeanUtils.copyProperties(registrationDto.getSecondaryInfoDto(), secondaryInfo);
		BeanUtils.copyProperties(registrationDto.getBankDetailsDto(), bankDetails);

		employee.setBankDetails(bankDetails);
		bankDetails.setEmployee(employee);

		employee.setSecondaryInfo(secondaryInfo);
		secondaryInfo.setEmployee(employee);

//		for (EducationDetailsDto educationalDetailsDto : registrationDto.getEducationDetailsDto()) {
//			EducationDetails educationalDetailsEntity = new EducationDetails();
//			BeanUtils.copyProperties(educationalDetailsDto, educationalDetailsEntity);
//			educationDetails.add(educationalDetailsEntity);
//		}
//		employee.setEducationDetails(educationDetails);
//
//		for (EducationDetails educationalDetails2 : educationDetails) {
//			educationalDetails2.setEmployee(employee);
//		}
		
		for (EducationDetailsDto educationDetailsDto:registrationDto.getEducationDetailsDto()) {
			EducationDetails educationDetailsEntity=new EducationDetails();
			BeanUtils.copyProperties(educationDetailsDto, educationDetailsEntity);
			educationDetailsEntity.setEmployee(employee);
			educationDetails.add(educationDetailsEntity);
			}
		employee.setEducationDetails(educationDetails);
		
		
		
		
		
		
		
		

		for (AddressDetailsDto addressDetailsDto : registrationDto.getAddressDetailsDto()) {
			AddressDetails addressDetailsEntity = new AddressDetails();
			BeanUtils.copyProperties(addressDetailsDto, addressDetailsEntity);
			addressDetails.add(addressDetailsEntity);
		}
		employee.setAddressDetails(addressDetails);

		for (AddressDetails addressDetails2 : addressDetails) {
			addressDetails2.setEmployee(employee);
		}

		for (ExperienceDto experienceDto : registrationDto.getExperienceDto()) {
			Experience experienceEntity = new Experience();
			BeanUtils.copyProperties(experienceDto, experienceEntity);
			experience.add(experienceEntity);
		}
		employee.setExperience(experience);

		for (Experience experience2 : experience) {
			experience2.setEmployee(employee);
		}

		for (ContactDto contactDto : registrationDto.getContactDto()) {
			Contact contactsEntity = new Contact();
			BeanUtils.copyProperties(contactDto, contactsEntity);
			contacts.add(contactsEntity);
		}
		employee.setContact(contacts);

		for (Contact contact : contacts) {
			contact.setEmployee(employee);
		}

		for (TechnicalSkillsDto technicalSkillsDto : registrationDto.getTechnicalSkillsDto()) {
			TechnicalSkills technicalSkillsEntity = new TechnicalSkills();
			BeanUtils.copyProperties(technicalSkillsDto, technicalSkillsEntity);
			technicalSkills.add(technicalSkillsEntity);
		}
		employee.setTechnicalSkills(technicalSkills);

		for (TechnicalSkills technicalSkills2 : technicalSkills) {
			technicalSkills2.setEmployee(employee);
		}
	
		employeeRepository.save(employee);
		
		return Optional.ofNullable(employee.getEmployeeId());
	}

}
